/**
 * Displays a Bootstrap Toast notification dynamically.
 *
 * @param {string} message - The message to display.
 * @param {string} [type='info'] - The type of the toast, determines background color and icon.
 *   Acceptable values:
 *     - 'success' ✅ → Green background (for success messages)
 *     - 'error'   ❌ → Red background (for errors or failures)
 *     - 'warning' ⚠️ → Yellow background (for cautionary alerts)
 *     - 'info'    ℹ️ → Dark background (default, for general info)
 * @param {number} [duration=3000] - Time in milliseconds before the toast disappears (default is 3 seconds).
 *
 * @example
 * showToast('POI added successfully!', 'success');
 * showToast('You must be logged in.', 'error');
 * showToast('Please upload a photo.', 'warning', 5000);
 * showToast('Fetching data...', 'info', 2000);
 * 
 * Generated by ChatGPT 4.0
 * @author https://chat.openai.com/
 */
function showToast(message, type = 'info', duration = 3000) {
    const existing = document.getElementById('dynamic-toast');
    if (existing) existing.remove();
  
    const colorMap = {
      success: 'bg-success text-white',
      error: 'bg-danger text-white',
      warning: 'bg-warning text-dark',
      info: 'bg-dark text-white',
    };
  
    const toastDiv = document.createElement('div');
    toastDiv.id = 'dynamic-toast';
    toastDiv.className = `toast align-items-center ${colorMap[type] || colorMap.info} border-0`;
    toastDiv.role = 'alert';
    toastDiv.ariaLive = 'assertive';
    toastDiv.ariaAtomic = 'true';
    toastDiv.style.minWidth = '250px';
  
    toastDiv.innerHTML = `
      <div class="d-flex">
        <div class="toast-body">${message}</div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
      </div>
    `;
  
    const container = document.createElement('div');
    container.className = 'toast-container position-fixed bottom-0 start-50 translate-middle-x p-3';
    container.style.zIndex = '2000';
    container.appendChild(toastDiv);
    document.body.appendChild(container);
  
    const bsToast = new bootstrap.Toast(toastDiv, { delay: duration });
    bsToast.show();
  
    // Auto delete DOM
    toastDiv.addEventListener('hidden.bs.toast', () => {
      container.remove();
    });
}

// Attach showToast to the global window object
window.showToast = showToast;