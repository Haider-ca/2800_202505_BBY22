/**
 * @file mapTheme.js
 * @project PathPal App
 * @description Handles dynamic theming of the Mapbox map, including dark/light styles,
 * icon swapping, and boundary/POI reloads when the theme changes.
 * @ai Use: This file leverages AI as a learning tool. Portions of this code were generated by AI
 * and subsequently modified to align with PathPal’s design and functionality requirements.
 * @author PathPal Team
 *
 * Sections:
 *   1. Constants & Image Patch
 *   2. Theme Resolution Utilities
 *   3. applyMapTheme: Style & Icon Updates
 *   4. Initial Setup & Mutation Observers
 *
 * Dependencies: MapboxGL, Turf.js
 */

(function () {
  // 1. Constants & Image Patch
  const LIGHT_STYLE = 'mapbox://styles/mapbox/streets-v11';
  const DARK_STYLE = 'mapbox://styles/mapbox/dark-v10';

  /**
   * Patch map.addImage to remove any existing image with the same id
   * before adding, avoiding duplicate-icon errors.
   */
  function patchAddImage(map) {
    const orig = map.addImage.bind(map);
    map.addImage = (id, ...args) => {
      if (map.hasImage(id)) {
        try { map.removeImage(id); } catch (_) { }
      }
      return orig(id, ...args);
    };
  }

  // 2. Theme Resolution Utilities

  /**
   * Returns the appropriate Mapbox style URL based on the theme.
   * Supports 'light', 'dark', and 'system' (follows OS setting).
   */
  function styleFor(theme) {
    if (theme === 'dark') return DARK_STYLE;
    if (theme === 'light') return LIGHT_STYLE;
    return window.matchMedia('(prefers-color-scheme: dark)').matches
      ? DARK_STYLE
      : LIGHT_STYLE;
  }

  // 3. applyMapTheme: Style & Icon Updates

  /**
   * Applies the specified theme to the map:
   *   - Switches the Mapbox style
   *   - Waits for style load & idle to:
   *     • Swap in dark/light icons
   *     • Reload the boundary layer
   *     • Trigger a POI reload via 'moveend'
   */
  function applyMapTheme(theme) {
    const map = window.pathpalMap;
    if (!map) return;

    map.setStyle(styleFor(theme));

    map.once('style.load', () => {
      map.once('idle', () => {
        const isDark = theme === 'dark';
        [
          { id: 'custom-restroom', light: '/icons/restroom.png', dark: '/icons/restroom-gray.png' },
          { id: 'bench-15', light: '/icons/bench.png', dark: '/icons/bench-gray.png' },
          { id: 'ramp-15', light: '/icons/ramp.png', dark: '/icons/ramp-gray.png' },
        ].forEach(({ id, light, dark }) => {
          const url = isDark ? dark : light;
          map.loadImage(url, (err, img) => {
            if (err) return console.error(`Failed loading ${url}`, err);
            if (map.hasImage(id)) map.removeImage(id);
            map.addImage(id, img);
          });
        });

        // Reload boundary layer
        fetch('/data/metro-vancouver-boundaries.geojson')
          .then(r => r.json())
          .then(geo => {
            const fc = turf.featureCollection(geo.features);
            const hull = turf.convex(fc);
            if (!hull) throw new Error('Convex hull failed');
            if (map.getSource('boundary')) {
              map.getSource('boundary').setData(hull);
            } else {
              map.addSource('boundary', { type: 'geojson', data: hull });
              map.addLayer({
                id: 'boundary-line',
                type: 'line',
                source: 'boundary',
                layout: { 'line-join': 'round', 'line-cap': 'round' },
                paint: { 'line-color': '#FF0000', 'line-width': 2 }
              });
            }
          })
          .catch(err => console.error('Boundary reload error:', err));
        // Trigger POI reload in map.js
        map.fire('moveend');
      });
    });
  }

  // 4. Initial Setup & Mutation Observers
  document.addEventListener('DOMContentLoaded', () => {
    const map = window.pathpalMap;
    if (map) patchAddImage(map);
    const initial = document.documentElement.getAttribute('data-theme') || 'light';
    applyMapTheme(initial);
    new MutationObserver(records => {
      for (const rec of records) {
        if (rec.attributeName === 'data-theme') {
          applyMapTheme(document.documentElement.getAttribute('data-theme'));
        }
      }
    }).observe(document.documentElement, { attributes: true });

    // Listen for OS color-scheme changes when in 'system' mode
    const mql = window.matchMedia('(prefers-color-scheme: dark)');
    mql.addEventListener('change', () => {
      if (document.documentElement.getAttribute('data-theme') === 'system') {
        applyMapTheme('system');
      }
    });
  });
})();
